var gl;
var program;
var cube;

window.onload = function init()
{
    var canvas = document.getElementById( "gl-canvas" );
    
    gl = WebGLUtils.setupWebGL( canvas );
    if ( !gl ) { alert( "WebGL isn't available" ); }

    gl.viewport( 0, 0, canvas.width, canvas.height );
    gl.clearColor( 0.0, 0.0, 0.0, 1.0 );
    
    program = initShaders( gl, "vertex-shader", "fragment-shader" );
    gl.useProgram( program );
    

    cube = new Cube(gl);

    // EXERCISE:  create all the matrices here.


    document.getElementById("MyButton").onclick = function () {
        console.log("You clicked My Button!");
    };

    document.getElementById("ZPlus").onclick = function () {
        console.log("You clicked z + 0.1.");
    };

    document.getElementById("ZMinus").onclick = function () {
        console.log("You clicked z - 0.1.");
    };

    var clientX, clientY;
    var downWorld;
    var mouseIsDown = false;

    canvas.addEventListener("mousedown", function (e) {
        mouseIsDown = true;
        clientX = e.clientX;
        clientY = e.clientY;
        var cursorX = e.clientX - canvas.offsetLeft;
        var cursorY = e.clientY - canvas.offsetTop;
        console.log("X: " + cursorX + " Y: " + cursorY);
        var mouseCanvas = new PV(cursorX, cursorY, 0, true);

        // EXERCISE
    });

    canvas.addEventListener("mouseup", function (e) {
        mouseIsDown = false;
    });

    canvas.addEventListener("mousemove", function (e) {
        if (!mouseIsDown)
            return;
        var cursorX = e.clientX - canvas.offsetLeft;
        var cursorY = e.clientY - canvas.offsetTop;
        console.log("X: " + cursorX + " Y: " + cursorY);

        // EXERCISE
    });

    window.onkeydown = function( event ) {
        var key = String.fromCharCode(event.keyCode);
        console.log("You typed " + key);
        if (event.shiftKey)
            console.log("Shift is on.");

        // EXERCISE
    };

    window.onresize = function (event) {
        console.log("resize " + canvas.width + " " + canvas.height);
    }

    render();
};


function render() {
    gl.enable(gl.DEPTH_TEST)
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    cube.render(gl, program);

    requestAnimFrame( render )
}
